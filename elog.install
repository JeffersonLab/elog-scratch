<?php
/**
 * Created by PhpStorm.
 * User: theo
 * Date: 4/11/19
 * Time: 10:58 AM
 */


use Drupal\field\Entity\FieldStorageConfig;
use Drupal\taxonomy\Entity\Term;


/**
 * Implements hook_uninstall().
 */
function elog_install()
{
    _elog_create_taxonomy_terms();
}


/**
 * Implements hook_uninstall().
 */
function elog_uninstall()
{
    _elog_remove_taxonomy_terms();
    _elog_delete_fields();
    _elog_delete_field_storage();
    _elog_delete_config();
    _elog_drop_lognumber_table();
}

/**
 * Implements hook_schema().
 */
function elog_schema()
{

    $schema['elog_lognumber'] = array(
        'description' => 'Auto assign unique logbook entry numbers',
        'fields' => array(
            'lognumber' => array(
                'description' => 'Primary Key. logentry entry number',
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
            ),
            'bundle' => array(
                'description' => 'The bundle to which lognumber belongs.',
                'type' => 'varchar',
                'length' => '24',
                'not null' => TRUE,
            ),
        ),
        'primary key' => array(
            'lognumber',
        ),
    );

    return $schema;
}


/**
 * Implements hook_uninstall().
 */
function _elog_drop_lognumber_table()
{
    // Make real foreign keys.
//    \Drupal::database()
//        ->query('DROP TABLE {elog_lognumber}');
}

function _elog_delete_fields(){
    if( $field = Drupal\field\Entity\FieldConfig::loadByName('node','logentry','field_lognumber')){
        $field->delete();
    }
}

function _elog_delete_field_storage()
{
    if ($field_storage = Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_lognumber')) {
        $field_storage->delete();
    }
    if ($field_storage = Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_logbooks')) {
        $field_storage->delete();
    }
    if ($field_storage = Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_attachments')) {
        $field_storage->delete();
    }
    if ($field_storage = Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_entry_makers')) {
        $field_storage->delete();
    }
    if ($field_storage = Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_notify')) {
        $field_storage->delete();
    }
}

function _elog_delete_config()
{
    // It should be safe to simply call the items below without checking for existence
    // first because getEditable will instantiate the object if it doesn't exist
    // and then we'll promptly delete it either way.
    Drupal::configFactory()->getEditable('node.field_lognumber')->delete();
    Drupal::configFactory()->getEditable('node.logentry.field_lognumber')->delete();
    Drupal::configFactory()->getEditable('node.field_logbooks')->delete();
    Drupal::configFactory()->getEditable('node.field_entry_makers')->delete();
    Drupal::configFactory()->getEditable('node.field_notify')->delete();

}


/**
 * Creates some initial taxonomy terms.
 * Should be called after pathauto config so that the terms
 * get assigned the desired paths.
 */
function _elog_create_taxonomy_terms(){

    $parent = Term::create([
        'name' => 'Other Logbooks',
        'description' => "Logbooks that don't belong to any other set",
        'vid' => 'logbooks',
    ]);
    $parent->save();

    $child = Term::create([
        'name' => 'TLOG',
        'description' => 'The Test (AKA Trash) Logbook',
        'vid' => 'logbooks',
        'parent' => [$parent->id()],
    ]);
    $child->save();

}

/**
 * Creates some initial taxonomy terms.
 * Should be called after pathauto config so that the terms
 * get assigned the desired paths.
 */
function _elog_remove_taxonomy_terms(){



}